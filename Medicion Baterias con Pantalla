
/*
 * BIBLIOTECAS
 */

#include <SPI.h>  // VIENE POR DEFAULT
/*
 * LAS 2 QUE SIGUEN
 * DESCARGUEN LOS 2 .ZIP DE LA SIGUEINTE CARPETA
 * https://etrrar-my.sharepoint.com/:f:/g/personal/mmansilla_etrr_edu_ar/Ej8Ql7-93QNIkEa7tDUm6W4BPBY13N2iVZMJAZT8hyXE9g?e=ICGK85
 * DESPUES EN EL IDE VAN A: PROGRAMA -> INCLUIR LIBRERIA -> AÃ‘ADIR BIBLIOTECA .ZIP
 * LO HACEN PARA LOS 2 ARCHIVOS
 */
#include <TFT_ILI9163C.h>
#include <Adafruit_GFX.h>

#include <math.h>
/*
 * DEFINICIONES
 */
#define __DC 9
#define __CS 10
//MOSI --> (SDA) --> D11
#define __RST 12
// SCLK --> (SCK) --> D13

#define Res1 9500000
#define Res2 1000000
#define DivRes 0.095238

/*
 * PANTALLA
 */
/*
 * COLORES
 */
#define BLACK   0x0000 
#define WHITE   0xFFFF

TFT_ILI9163C screen = TFT_ILI9163C(__CS, __DC, __RST);
/*
 * PROTOTIPOS FUNCIONES
 */
 
unsigned long int LEDS;
float MedicionLeds();
void limpiar_pantalla (void);
void actualizar_pantalla_C (float, float, int); //ESTO CAMBIENLO AL TIPO DE VARIABLES QUE MANEJAN



void setup() {
  Serial.begin(9600);
  screen.begin(); 
  limpiar_pantalla();
}

void loop() {
  float resultado2 = MedicionLeds();
  actualizar_pantalla (resultado2, 1, 1);
  delay(1000);
}

void actualizar_pantalla (float tension, float corriente, int tiempo)
{
  limpiar_pantalla();
  screen.setTextColor(WHITE);
  screen.setCursor(20, 2);
  screen.setTextSize(2);
  screen.print("TENSION");
  screen.setCursor(20, 21);
  screen.print(tension);
  screen.setCursor(93, 21);
  screen.print("V");
  screen.setTextSize(1);
  screen.setCursor(6, 36);
  screen.print("--------------------");
  screen.setCursor(12, 46);
  screen.setTextSize(2);
  screen.print("CORRIENTE");
  screen.setCursor(20, 66);
  screen.print(corriente);
  screen.setCursor(93, 66);
  screen.print("A");
  screen.setTextSize(1);
  screen.setCursor(6, 81);
  screen.print("--------------------");
  screen.setCursor(27, 91);
  screen.setTextSize(2);
  screen.print("TIEMPO");
  screen.setCursor(35, 111);
  screen.print(tiempo);
  screen.setCursor(57, 111);
  screen.print(":");
  screen.setCursor(65, 111);
  screen.print(tiempo);
  screen.setTextSize(1); 
}

void limpiar_pantalla (void)
{
  screen.fillRect(10, 20, 80, 15, BLACK);
  screen.fillRect(10, 65, 80, 15, BLACK);
  screen.fillRect(5, 111, 128, 15, BLACK); 
}

float MedicionLeds(){
  int medicion = analogRead(A0);
  int calculo = (medicion*5);  //Vemos el valor de tension a la salida del divisor de tension.
  float voltaje = calculo/1023;
  float resultado = voltaje/DivRes;
  if ((resultado > 49.16) && (resultado <= 52.8)) LEDS = 225; //10 LEDS
  if ((resultado > 48.04) && (resultado <= 49.16)) LEDS = 160; //9 LEDS
  if ((resultado > 47.48) && (resultado <= 48.04)) LEDS = 140; //8 LEDS
  if ((resultado > 46.36) && (resultado <= 47.48)) LEDS = 130; //7 LEDS
  if ((resultado > 45.24) && (resultado <= 46.36)) LEDS = 110; //6 LEDS
  if ((resultado > 44.68) && (resultado <= 45.24)) LEDS = 90; //5 LEDS
  if ((resultado > 43.56) && (resultado <= 44.68)) LEDS = 80; //4 LEDS
  if ((resultado > 42.44) && (resultado <= 43.56)) LEDS = 50; //3 LEDS
  if ((resultado > 41.88) && (resultado <= 42.44)) LEDS = 40; //2 LEDS
  if ((resultado > 40.2) && (resultado <= 41.88)) LEDS = 20; //1 LED
  if ((resultado > 0) && (resultado<= 40.2)) LEDS = 0; //0 LED
  analogWrite(3, LEDS);
  Serial.println(LEDS);
  Serial.println(voltaje);
  Serial.println(resultado);  //Sacamos el valor total de las 4 baterias.
  Serial.println(medicion);
  return resultado;
}
